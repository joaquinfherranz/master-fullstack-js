{"version":3,"sources":["script.js"],"names":["$http","url","core","method","args","Promise","resolve","reject","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","response","JSON","parse","responseText","open","send","onerror","statusText","get","then","data","content","forEach","element","nombre_estacion","id","direccion","document","body","innerHTML","err","console","log"],"mappings":";;AAAA,SAASA,KAAT,CAAeC,GAAf,EAAmB;AACjB,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,MAAD,EAASF,GAAT,EAAcG,IAAd,EAAuB;AAClC,WAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACrC,UAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;;AAEAD,MAAAA,OAAO,CAACE,kBAAR,GAA6B,YAAM;AACjC;AACE,YAAIF,OAAO,CAACG,UAAR,KAAuB,CAAvB,IAA4BH,OAAO,CAACI,MAAR,KAAmB,GAAnD,EAAwD;AACtD,cAAIJ,OAAO,CAACK,QAAR,IAAkB,KAAtB,EAA6B;AAC3BN,YAAAA,MAAM,CAAC,WAAD,CAAN;AACD,WAFD,MAEO;AACLD,YAAAA,OAAO,CAACQ,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACQ,YAAnB,CAAD,CAAP;AACD;AACF,SAND,MAMO,IAAIR,OAAO,CAACG,UAAR,KAAuB,CAA3B,EAA8B;AACnCJ,UAAAA,MAAM,CAAC,WAASC,OAAO,CAACI,MAAlB,CAAN,CADmC,CAEnC;AACA;AACD,SAZ8B,CAajC;AACA;AACA;AACA;;AAED,OAlBD;;AAmBAJ,MAAAA,OAAO,CAACS,IAAR,CAAad,MAAb,EAAqBF,GAArB,EAA0B,IAA1B,EAtBqC,CAsBJ;;AACjCO,MAAAA,OAAO,CAACU,IAAR;;AACAV,MAAAA,OAAO,CAACW,OAAR,GAAkB,YAAY;AAC5BZ,QAAAA,MAAM,CAAC,KAAKa,UAAN,CAAN;AACD,OAFD;AAID,KA5BM,CAAP,CADkC,CA8BlC;AAED,GAhCD;;AAkCA,SAAO;AACLC,IAAAA,GAAG,EAAE;AAAA,aAAMnB,IAAI,CAAC,KAAD,EAAQD,GAAR,CAAV;AAAA;AADA,GAAP;AAGD,C,CAED;AAEA;;;AAEAD,KAAK,CAAC,mCAAD,CAAL,CACGqB,GADH,GAEGC,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACZ,MAAIC,OAAO,GAAG,EAAd;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAa,UAAAC,OAAO,EAAI;AACtBF,IAAAA,OAAO,iCAAuBE,OAAO,CAACC,eAA/B,eAAmDD,OAAO,CAACE,EAA3D,0BAA0EF,OAAO,CAACG,SAAlF,UAAP;AACD,GAFD;AAGAC,EAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,iBAAiCR,OAAjC;AACD,CARH,WASS,UAAAS,GAAG;AAAA,SAAEC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAF;AAAA,CATZ","sourcesContent":["function $http(url){\n  const core = (method, url, args) => {\n    return new Promise ((resolve, reject)=>{\n      let xmlHttp = new XMLHttpRequest();     \n      \n      xmlHttp.onreadystatechange = () => {\n        // try {\n          if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {\n            if (xmlHttp.response=='404') {\n              reject('Error 404');\n            } else {\n              resolve(JSON.parse(xmlHttp.responseText));              \n            } \n          } else if (xmlHttp.readyState === 4) {\n            reject('Error '+xmlHttp.status);   \n            // console.error(\"ERROR! 404\");\n            //   console.info(JSON.parse(xmlHttp.responseText));\n          }\n        // }\n        // catch (e) {\n        //   reject(e);\n        // }\n\n      };\n      xmlHttp.open(method, url, true); // asincrona\n      xmlHttp.send();\n      xmlHttp.onerror = function () {\n        reject(this.statusText);\n      };\n      \n    });\n    // .catch(error=>reject('Error en send'))\n    \n  };\n\n  return {\n    get: () => core('GET', url)\n  };\n}\n\n// var prueba = $http('http://airemad.com/api/v1/station').get();\n\n// console.log('prueba=', prueba);\n\n$http(\"http://airemad.com/api/v1/station\")\n  .get()\n  .then(data => {\n    let content = \"\";\n    data.forEach(element => {\n      content += `<li>La estación ${element.nombre_estacion} (${element.id}) está en ${element.direccion}</li>`;\n    });\n    document.body.innerHTML = `<ul>${content}</ul>`;\n  })\n  .catch(err=>console.log(err));"],"file":"script.js"}